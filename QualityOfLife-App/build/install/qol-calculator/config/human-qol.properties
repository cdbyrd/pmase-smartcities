/**
 *  Need to convert rating values from [0..100] to [-2..2] scale.
 *  To do that we will use a percentage factor and a value
 *  adjustment.  Their are 4 values in the [-2..2] scale, if you
 *  laid it out on a number line [0..4].   So essentially you are
 *  converting base 100 to base 4, and to do that you divide the
 *  value by 25, as 4 is 25% of 100.  Then to adjust the value
 *  from the [0..4] to the [-2..2] scale you subract the value
 *  by 2. This gives you the human to system form of the rationg
 *  values.   It allows humans to enter a value between [0..100]
 *  for rating a measure, but scales that down to provide easier
 *  values for manipulation in the system formulas.
 *  
 *  Human percentage to system scale mappings
 *  { 100:2, 75:1, 50:0, 25:-1, 0:-2 }
 */

def percentageFactor = 25
def valueAdjustment = 2
def scale = { num -> (num/percentageFactor - valueAdjustment) }
def avg = { items -> items.sum() / items.size() } 

environments {
    pollution {
        /** <<scale>> [0..100] **/
        air_quality=scale(50)
        drinking_water_quality_accessibility=scale(50)
        water_pollution=scale(50)
        garbage_disposal_satisfaction=scale(50)
        clean_and_tidy=scale(50)
        noise_and_light_pollution=scale(50)
        green_and_parks_quality=scale(50)
        comfortable_to_spend_time=scale(50)
    }
    crime {
        /** <<scale>> [0..100] **/
        level_of_crime=scale(60)
        crime_increasing=scale(60)
        safe_alone_daylight=scale(60)
        safe_alone_night=scale(60)
        worried_home_broken=scale(60)
        worried_mugged_robbed=scale(60)
        worried_car_stolen=scale(60)
        worried_things_car_stolen=scale(60)
        worried_attacked=scale(60)
        worried_insulted=scale(60)
        worried_skin_ethnic_religion=scale(60)
        problem_drugs=scale(60)
        problem_property_crimes=scale(60)
        problem_violent_crimes=scale(60)
        problem_corruption_bribery=scale(60)
    }
    traffic {
        /** average commute times in minutes across all people in region **/
        time_bus=5
        time_bike=3
        time_driving=30
        time_motorbike=4
        time_other=2
        time_train=6
        time_tram=0.01
        time_waiting=1
        time_walking=2
        time_overall=avg([time_bus,time_bike,time_driving,time_motorbike,time_other,time_train,time_tram,time_waiting,time_walking])
        index {
            inefficiency=200.92
        }
    }
    costofliving {
        index {
            local_purchase_power=144.59
            cost_of_living_incl_rent=57.73
            cost_of_living=72.26
            rent=41.14
            groceries=70.91
            restaurants=68.17
        }
    }
    propertyprices {
        index {
            price_to_income_ratio=2.98
            mortgage_percent_income=21.70
            loan_affordability=4.61
            price_to_rent_ratio=8.085
            gross_rental_yield=12.72
        }
    }
    climate {
        index {
            climate=79.66
        }
    }
    health {
        skill_and_competency=scale(55)
        speed=scale(55)
        modern_equipment=scale(55)
        accuracy_and_completeness=scale(55)
        friendliness_and_courtesy=scale(55)
        responsiveness_waitings=scale(55)
        location=scale(55)
        cost=scale(55)
    }

}

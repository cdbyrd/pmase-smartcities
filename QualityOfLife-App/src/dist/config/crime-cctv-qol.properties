/**
 * QoL configuration for the crime (cctv) benefit
 */

def benefitScaler = 0
def percentageFactor = 25
def valueAdjustment = 2
def avg = { items -> items.sum() / items.size() } 
def modelScale = { num -> ((num / percentageFactor) - valueAdjustment) }
def humanScale = { num -> ((num + valueAdjustment) * percentageFactor) }
def percentScale = { num, percentChange ->  num * (1 + percentChange/100) } 
def impact = { List range ->
    def scaler = benefitScaler ?: benefitScaler + 0.00001 
    def min = range?.first()
    def max = range?.last()
    (((max - min) * scaler) + min)
}
def scale = { num, range=null -> 
    if (range) {
        modelScale(humanScale(num) + impact(range)) 
    } else {
        num
    }
} 

environments {
    pollution {
        range {
            air_quality=0
            clean_and_tidy=0
            noise_and_light_pollution=0
            green_and_parks_quality=0
            comfortable_spend_time=0
        }
        base {
            air_quality=0.19047619047619047
            drinking_water_quality_accessibility=0.3888888888888889
            water_pollution=0.23529411764705882
            garbage_disposal_satisfaction=0
            clean_and_tidy=-0.05555555555555555
            noise_and_light_pollution=-0.1111111111111111
            green_and_parks_quality=0.4117647058823529
            comfortable_to_spend_time=0.5
        }
        air_quality=scale(base.air_quality, range.air_quality)
        drinking_water_quality_accessibility=scale(base.drinking_water_quality_accessibility)
        water_pollution=scale(base.water_pollution)
        garbage_disposal_satisfaction=scale(base.garbage_disposal_satisfaction)
        clean_and_tidy=scale(base.clean_and_tidy, range.clean_and_tidy)
        noise_and_light_pollution=scale(base.noise_and_light_pollution, range.noise_and_light_pollution)
        green_and_parks_quality=scale(base.green_and_parks_quality, range.green_and_parks_quality)
        comfortable_to_spend_time=scale(base.comfortable_to_spend_time, range.comfortable_to_spend_time)
    }
    crime {
        range {
            level_of_crime=-8..-18
            crime_increasing=-10..-20
            safe_alone_daylight=9..15
            safe_alone_night=6..12
            worried_home_broken=-2..-6
            worried_mugged_robbed=-8..-12
            worried_car_stolen=-6..-10
            worried_things_car_stolen=-7..-11
            worried_attacked=-8..-14
            worried_skin_ethnic_religion=-4..-8
            problem_drugs=-2..-6
            problem_property_crimes=-3..-9
            problem_violent_crimes=-6..-12
            problem_corruption_bribery=-1..-3
        }
        base {
            level_of_crime=0.9409172413793103
            crime_increasing=0.876081724137931
            safe_alone_daylight=0.42105263157894735
            safe_alone_night=-1
            worried_home_broken=0.625
            worried_mugged_robbed=0.5614035087719298
            worried_car_stolen=0.36363636363636365
            worried_things_car_stolen=0.7678571428571429
            worried_attacked=0.45614035087719296
            worried_insulted=0.38596491228070173
            worried_skin_ethnic_religion=0.06896551724137931
            problem_drugs=0.8035714285714286
            problem_property_crimes=0.8947368421052632
            problem_violent_crimes=0.7931034482758621
            problem_corruption_bribery=0.2545454545454545
        }
        level_of_crime=scale(base.level_of_crime, range.level_of_crime)
        crime_increasing=scale(base.crime_increasing, range.crime_increasing)
        safe_alone_daylight=scale(base.safe_alone_daylight, range.safe_alone_daylight)
        safe_alone_night=scale(base.safe_alone_night, range.safe_alone_night)
        worried_home_broken=scale(base.worried_home_broken, range.worried_home_broken)
        worried_mugged_robbed=scale(base.worried_mugged_robbed, range.worried_mugged_robbed)
        worried_car_stolen=scale(base.worried_car_stolen, range.worried_car_stolen)
        worried_things_car_stolen=scale(base.worried_things_car_stolen, rangeworried_things_car_stolen)
        worried_attacked=scale(base.worried_attacked, range.worried_attacked)
        worried_insulted=scale(base.worried_insulted)
        worried_skin_ethnic_religion=scale(base.worried_skin_ethnic_religion, range.worried_skin_ethnic_religion)
        problem_drugs=scale(base.problem_drugs, range.problem_drugs)
        problem_property_crimes=scale(base.problem_property_crimes, range.problem_property_crimes)
        problem_violent_crimes=scale(base.problem_violent_crimes, range.problem_violent_crimes)
        problem_corruption_bribery=scale(base.problem_corruption_bribery, range.problem_corruption_bribery)
    }
    traffic {
        /** overall average commute times in minutes (across all people) **/
        time_bus=2.22
        time_bike=1.39
        time_driving=26.22
        time_motorbike=3.12
        time_other=1.39
        time_train=6.06
        time_tram=0.01
        time_waiting=1.22
        time_walking=1.61
        time_overall=avg([time_bus,time_bike,time_driving,time_motorbike,time_other,time_train,time_tram,time_waiting,time_walking])
        index {
            inefficiency=196.86
        }
    }
    costofliving {
        index {
            local_purchase_power=146.21
            cost_of_living_incl_rent=58.08
            cost_of_living=73.39
            rent=40.68
            groceries=73.17
            restaurants=68.12
        }
    }
    propertyprices {
        index {
            price_to_income_ratio=3.02
            mortgage_percent_income=21.95
            loan_affordability=4.56
            price_to_rent_ratio=8.405
            gross_rental_yield=12.11
        }
    }
    climate {
        index {
            climate=79.66
        }
    }
    health {
        range {
            speed=4..10
            responsiveness_waitings=6..12
            cost=3..6
        }
        base {
            skill_and_competency=0.8666666666666667
            speed=0.4666666666666667
            modern_equipment=1.8
            accuracy_and_completeness=1.0666666666666667
            friendliness_and_courtesy=0.8
            responsiveness_waitings=0.4666666666666667
            location=1.1428571428571428
            cost=-0.07142857142857142
        }
        skill_and_competency=scale(base.skill_and_competency)
        speed=scale(base.speed, range.speed)
        modern_equipment=scale(base.modern_equipment)
        accuracy_and_completeness=scale(base.accuracy_and_completeness)
        friendliness_and_courtesy=scale(base.friendliness_and_courtesy)
        responsiveness_waitings=scale(base.responsiveness_waitings, range.responsiveness_waitings)
        location=scale(base.location)
        cost=scale(base.cost, range.cost)
    }
}

